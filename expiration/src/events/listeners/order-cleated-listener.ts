import { Listener, IOrderCreatedEvent, Subjects } from "@xtptickets/common";
import { queueGroupName } from "./queuq-group-name";
import { Message } from "node-nats-streaming";
import { expirationQueue } from "../../queues/expiration-queue";

export class OrderCreatedListener extends Listener<IOrderCreatedEvent> {
    subject: Subjects.OrderCreated = Subjects.OrderCreated;
    queueGroupName: string = queueGroupName;

    async onMessage(data: IOrderCreatedEvent['data'], msg: Message) {
        // 15 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï - ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ delay
        const delay = new Date(data.expiresAt).getTime() - new Date().getTime();
        console.log("üöÄ ~ OrderCreatedListener ~ onMessage ~ delay:", delay / 1000);
        /**
         * üì• ‡πÄ‡∏û‡∏¥‡πà‡∏° job ‡∏•‡∏á‡πÉ‡∏ô queue 
         * üî• Bull ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö job ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Redis ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ worker ‡∏î‡∏∂‡∏á‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
         */
        await expirationQueue.add({
            orderId: data.id
        },{
            delay
        });

        msg.ack();
    }
} 