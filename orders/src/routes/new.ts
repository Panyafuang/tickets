// import { BadRequestError, NotFoundError, OrderStatus, requireAuth, validateRequest } from "@xtptickets/common";
// import express, { Request, Response } from "express";
// import { body } from "express-validator";
// import mongoose from "mongoose";
// import { Ticket } from "../models/ticket";
// import { Order } from "../models/order";
// import { OrderCreatedPublisher } from "../events/publishers/order-created-publisher";
// import { natsWrapper } from "../nats-wrapper";

// const router = express.Router();
// /**
//  * 15 * 60 ‡∏Ñ‡∏∑‡∏≠ 900 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = 15 ‡∏ô‡∏≤‡∏ó‡∏µ
//  * ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (window of time)" ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á 15 ‡∏ô‡∏≤‡∏ó‡∏µ
//  */
// const EXPIRATION_WINDOW_SECONDS = 15 * 60;

// router.post(
//   "/api/orders/",
//   requireAuth,
//   [
//     body("ticketId")
//       .not()
//       .isEmpty()
//       .custom((input: string) => mongoose.Types.ObjectId.isValid(input))
//       .withMessage("TicketId must be provided"),
//   ],
//   validateRequest,
//   async (req: Request, res: Response) => {
//     /** 1. Find the ticket the user trying to order in DB. */ 
//     const { ticketId } = req.body;
//     const ticket = await Ticket.findById(ticketId);
//     if (!ticket) {
//       throw new NotFoundError();
//     }

//     /**
//      * 2. Make sure that ticket is not already reserved.
//      * -- Criterial --
//      * - Run query to look all orders. Find an order where order.ticket = the ticket we just found (‡∏Ç‡πâ‡∏≠ 1).
//      * - The order status is not cancelled.
//      * - If we find an order from that means the ticket is reserved.
//      */
//     const isReserved = await ticket.isReserved();
//     if (isReserved) {
//       throw new BadRequestError('Ticket is already reserved');
//     }

//     /** 3. Calculate an expiration date for this order. 
//      * expiration.getSeconds() ‡πÑ‡∏î‡πâ "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ" ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 12 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 14:01:12) 
//      * ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏ß‡∏Å‡∏î‡πâ‡∏ß‡∏¢ EXPIRATION_WINDOW_SECONDS (900 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) 
//      * ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô setSeconds(...) ‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 
//      * üìå Date object ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏≤‡∏ó‡∏µ/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ 
//      * ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: expiration ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ 15 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏û‡∏≠‡∏î‡∏µ
//     */
//     const expiration = new Date();
//     expiration.setSeconds(expiration.getSeconds() + EXPIRATION_WINDOW_SECONDS);

//     /** 4. Build the order and save to DB. */
//     const order = Order.build({
//       userId: req.currentUser!.id,
//       status: OrderStatus.Created,
//       expiresAt: expiration,
//       ticket
//     });
//     await order.save();

//     /** 5. Publish an event an order was created. (Back to common model, and create event)  */
//     new OrderCreatedPublisher(natsWrapper.client).publish({
//       id: order.id,
//       status: order.status,
//       userId: order.userId,
//       expiresAt: order.expiresAt.toISOString(),
//       version: order.version,
//       ticket: {
//         id: ticket.id,
//         price: ticket.price
//       }
//     });

//     res.status(201).send(order);
//   }
// );

// export { router as newOrderRouter };



import { BadRequestError, OrderStatus, requireAuth, validateRequest } from "@xtptickets/common";
import express, { Request, Response } from "express";
import { body } from "express-validator";
import { Order } from "../models/order";
import { natsWrapper } from "../nats-wrapper";
import { Stan } from "node-nats-streaming";
import { IBusReservationCompleteEvent } from "@xtptickets/common";
import { BusReservationRequestPublisher } from "../events/publishers/bus-reservation-request-publisher";
import { BusReservationCompleteListener } from "../events/listeners/bus-reservation-complete-listener";

const router = express.Router();
const EXPIRATION_WINDOW_SECONDS = 1 * 60; // 1 ‡∏ô‡∏≤‡∏ó‡∏µ

router.post('/api/orders', requireAuth,
  [
    body("scheduleId").not().isEmpty().withMessage("Schedule ID is required"),
    body("tickets").isArray({ min: 1 }).withMessage("Tickets must be an array of one or more items"),
  ],
  validateRequest,
  async (req: Request, res: Response) => {
    const { scheduleId, tickets: ticketInputs } = req.body;

    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "AwaitingReservation"
    const expiration = new Date();
    expiration.setSeconds(expiration.getSeconds() + EXPIRATION_WINDOW_SECONDS);

    const order = Order.build({
      userId: req.currentUser!.id,
      status: OrderStatus.AwaitingReservation,
      expiresAt: expiration,
      tickets: [], // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß
      totalAmount: 0,
    });
    await order.save();

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏≠ "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö" ‡∏à‡∏≤‡∏Å Bus Service
    const reservationPromise = new Promise((resolve, reject) => {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Listener ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      const listener = new BusReservationCompleteListener(natsWrapper.client, (result: IBusReservationCompleteEvent['data']) => {
        // ‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Event ‡∏ó‡∏µ‡πà‡∏°‡∏µ orderId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ NATS ‡∏à‡∏∞ publish EVENTS ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡πÜ events
        if (result.orderId === order.id) {
          listener.close(); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          if (result.success) {
            resolve(result.schedule); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Snapshot ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
          } else {
            reject(new BadRequestError(result.errorMessage || 'Reservation failed'));
          }
        }
      });
      listener.listen();
      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ Timeout ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        listener.close();
        reject(new Error('Reservation request timed out'));
      }, 5000);
    });

    // 3. ‡∏™‡πà‡∏á Event "‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠" ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Bus Service
    await new BusReservationRequestPublisher(natsWrapper.client).publish({
      scheduleId,
      seat: ticketInputs.map((t: any) => t.seatNumber),
      orderId: order.id,
      version: order.version
    });

    try {
      // 4. ‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Promise (‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ Bus Service ‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö)
      const scheduleSnapshot: any = await reservationPromise;

      // 5. ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Order ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Snapshot ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const ticketsData = ticketInputs.map((t: any) => ({
        scheduleId: scheduleSnapshot.id,
        busId: scheduleSnapshot.busId,
        origin: scheduleSnapshot.origin,
        destination: scheduleSnapshot.destination,
        departureTime: scheduleSnapshot.departureTime,
        seatNumber: t.seatNumber,
        passengerName: t.passengerName,
        price: scheduleSnapshot.price
      }));

      order.set({
        status: OrderStatus.Created,
        tickets: ticketsData,
        totalAmount: ticketsData.reduce((sum: any, t: { price: any; }) => sum + t.price, 0)
      });
      await order.save();

      res.status(201).send(order);

    } catch (err) {
      // 6. ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ Timeout), ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Order ‡∏ô‡∏µ‡πâ
      order.set({ status: OrderStatus.Cancelled });
      await order.save();
      throw err; // ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Frontend
    }
  });

export { router as newOrderRouter };
